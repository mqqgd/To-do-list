// 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。

// 对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；
// 并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，
// 我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。
// 你的目标是尽可能满足越多数量的孩子，并输出这个最大数值

// 输入: g = [1,2,3], s = [1,1]
// 输出: 1
// 解释: 
// 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
// 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
// 所以你应该输出1。

// 先从胃口最小的开始，拿最小的试一下看是否满足，不满足则继续找再大一点的
function findContentChildren(g, s) {
    // 先对胃口值和饼干尺寸排序
    g.sort((a, b) => a - b);
    s.sort((a, b) => a - b);
    let count = 0;

    for (let i = 0; count < g.length && i < s.length; i++) {
        // 如果当前饼干尺寸能满足胃口值，count+1 ,否则继续找更大的饼干
        if (g[count] <= s[i]) {
            count++;
        }
    }
    return count;

}

let g = [1, 2, 3],
    s = [1, 1];
let res = findContentChildren(g, s);
console.log(res)